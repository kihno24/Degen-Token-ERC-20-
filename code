// SPDX-License-Identifier: MIT 
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol"; 
import "@openzeppelin/contracts/access/Ownable.sol";

// ERC20 contract with mint, burn, transfer, redeem, and check balance functionality
contract DegenToken is ERC20, Ownable {
    // Mapping to store the prices of each item
    mapping(uint256 => Item) public items;

    // Struct to define each item
    struct Item {
        string name;
        uint256 price;
    }

    // Constants for item IDs
    uint256 public constant MagicWand = 1;
    uint256 public constant MagicShoes = 2;
    uint256 public constant SteelSword = 3;

    constructor(address initialOwner) ERC20("Degen", "DGN") Ownable(initialOwner) {
        _mint(initialOwner, 1000000 * 10 ** decimals());

        // Initialize item names and prices
        items[MagicWand] = Item("Magic Wand", 100 * 10 ** decimals()); // Item ID: 1, Price: 100 tokens
        items[MagicShoes] = Item("Magic Shoes", 150 * 10 ** decimals()); // Item ID: 2, Price: 150 tokens
        items[SteelSword] = Item("Steel Sword", 200 * 10 ** decimals()); // Item ID: 3, Price: 200 tokens
    }

    // Function to mint new tokens, restricted to the owner
    function mint(address account, uint256 amount) public onlyOwner {
        _mint(account, amount);
    }

    // Function to burn tokens from the caller's balance
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    // Overridden transfer function to include additional checks
    function transfer(address to, uint256 amount) public override returns (bool) {
        require(to != address(0), "ERC20: transfer to the zero address");
        return super.transfer(to, amount);
    }

    // Redeem items by burning tokens
    function redeem(uint256 itemId) public {
        Item memory item = items[itemId];
        require(item.price > 0, "Item not available for redemption");
        require(balanceOf(msg.sender) >= item.price, "Insufficient balance");

        // Prompt the user to exchange their reward for the item name
        emit RewardExchangePrompt(msg.sender, itemId, item.name);

        // Perform the burn
        _burn(msg.sender, item.price);
    }

    // Event to prompt the user for reward exchange
    event RewardExchangePrompt(address indexed player, uint256 itemId, string itemName);

    // Overridden balanceOf function to get the balance of an account
    function balanceOf(address account) public view override returns (uint256) {
        return super.balanceOf(account);
    }
}
